@using System.Reflection
@model Zigbee2MqttAssistant.Models.Mqtt.Bridge
@{
    ViewData["Title"] = "Status";
}

<h1>Status</h1>

<p>
    Bridge State: <code>@(Model.Online ? "online" : "offline")</code>
</p>

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Allow Join</h5>
        @if (Model.PermitJoin)
        {
            <span class="badge badge-danger">DEVICES ARE CURRENTLY ALLOWED TO JOIN NETWORK.</span>
        }
        <form method="post">
            @if (Model.PermitJoin)
            {
                <button class="btn" type="submit" asp-action="AllowJoin" asp-route-permitJoin="false">DENY NEW DEVICES TO JOIN NETWORK</button>
            }
            else
            {
                <button class="btn" type="submit" asp-action="AllowJoin" asp-route-permitJoin="true">ALLOW NEW DEVICES TO JOIN NETWORK</button>
            }
        </form>
        <small class="form-text text-info">
            Use this feature to allow new devices to join the network.<br />
            <strong>This setting won't be persisted when you reboot Zigbee2Mqtt</strong>.
        </small>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Log Level</h5>
        Current Log Level: <code>@Model.LogLevel</code>

        <form method="post">
            <div class="input-group mb-3">
                <select name="level">
                    <option value="debug">Debug Mode</option>
                    <option value="info">Information level</option>
                    <option value="warn">Warnings & errors only</option>
                    <option value="error">Errors only</option>
                </select>
                <button class="btn bg-danger" asp-action="SetLogLevel">SET</button>
            </div>
        </form>
        <small class="form-text text-info">
            This is the <em>log level</em> you'll see in the Zigbee2Mqtt output log.<br/>
            Unfortunately those logs are not available through MQTT, so not available here yet.<br/>
            (It is considered to use the HASS.IO api to fetch those logs, but nothing is done yet)<br/>
            <strong>This setting won't be persisted when you reboot Zigbee2Mqtt</strong>.
        </small>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Reset Zigbee2Mqtt Assistant</h5>
        <form method="post">
            <button class="btn bg-danger" asp-action="Reset">RESET LOCAL STATE</button>
        </form>
        <small class="form-text text-info">
            Use this to force Zigbee2MqttAssistant (this software) to restart from scratch.<br/>
            Useful if the state is not sync with Zigbee2Mqtt.<br/>
            If you need this, it means there's a bug: please report it!
        </small>
    </div>
</div>

@{
    var assembly = typeof(Program).Assembly;
    var assemblyVersion = assembly.GetCustomAttribute<AssemblyVersionAttribute>()?.Version
        ?? assembly.GetCustomAttribute<AssemblyFileVersionAttribute>()?.Version
        ?? "<unknown>";
    var fullVersion = assembly.GetCustomAttribute<AssemblyInformationalVersionAttribute>()?.InformationalVersion ?? "<unknown>";
    var configuration = assembly.GetCustomAttribute<AssemblyConfigurationAttribute>()?.Configuration ?? "<unknown>";
}
<div class="card">
    <div class="card-body">
        <h5 class="card-title">Versions</h5>
        <div class="form-text text-info">
            Version of Zigbee2MqttAssistant (this software): <code>@assemblyVersion</code> (<code>@fullVersion</code>) @configuration<br />
            Version of Zigbee2Mqtt: <code>@Model.Zigbee2MqttVersion</code> <br />
            Coordinator version: <code>@Model.CoordinatorVersion</code> <br />
            Coordinator Zigbee Id: <code>@Model.CoordinatorZigbeeId</code>
        </div>
    </div>
</div>
