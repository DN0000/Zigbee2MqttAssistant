@using Humanizer
@using Zigbee2MqttAssistant.Models.Devices
@model Zigbee2MqttAssistant.Controllers.DeviceDetailsViewModel

@{
    var device = Model.Device;
    ViewData["Title"] = device.FriendlyName;
}

<h1 class="display-4">@device.FriendlyName</h1>

@if (device.IsAvailable == false)
{
    <div class="alert alert-danger">
        This device is considered as OFFLINE by Zigbee2Mqtt.
        @if (device.GetUnresponsiveDelay(out var unresponsiveDelay) == true)
        {
            <span>
                Last seen @unresponsiveDelay.Value.Humanize(2) (@device.LastSeen.Value.ToString("f")).
            </span>
        }
    </div>
}
else
{
    switch (device.GetUnresponsiveDelay(out var unresponsiveDelay))
    {
        case null:
            {
                <div class="alert alert.alert-secondary">
                    No "last_seen" information for this device: unable to check for responsiveness.
                </div>
            }
            break;
        case true:
            {
                <div class="alert alert-warning">
                    This device is UNRESPONSIVE since @unresponsiveDelay.Value.Humanize(2) (@device.LastSeen.Value.ToString("f"))
                </div>
            }
            break;
        default:
            {
                <div class="alert alert-info">
                    This device seems to work correctly. Last seen @unresponsiveDelay.Value.Humanize(2) ago.
                </div>
            }
            break;
    }
}

<p>
    Zigbee Id is <span class="badge badge-secondary">@(device.ZigbeeId ?? "unknown yet (did you restart recently?)")</span>.<br/>
    Address on Zigbee Network is <span class="badge badge-secondary">@("0x" + device.NetworkAddress?.ToString("X") ?? "unknown")</span>.<br/>
    Link quality is <span class="badge badge-secondary">@(device.LinkQuality?.ToString() ?? "unknown")</span>/<code>255</code>.<br/>
    @if (device.BatteryLevel.HasValue)
    {
        <span>
            Battery level is <span class="badge badge-secondary">@(device.BatteryLevel)</span>%.<br/>
        </span>
    }
    Model is <span class="badge badge-primary">@(device.Model ?? "unknown")</span> by <span class="badge badge-secondary">@(device.Manufacturer ?? "unknown")</span>.<br/>
    Hardware version is <code>@(device.HardwareVersion?.ToString() ?? "unknown")</code>.<br />
    This device type is <span class="badge badge-secondary">@(device.Type ?? "unknown")</span><br/>
</p>

@*@if (device.ZigbeeId != null)
{
    <p>
        Route to coordinator...
        <br />
        @foreach (var parentDevice in Model.RouteToCoordinator)
        {
            <span class="badge badge-dark">@parentDevice.FriendlyName</span>
        }
        @if (Model.RouteReachCoordinator)
        {
            <span class="badge alert-primary">Coordinator</span>
        }
        else
        {
            <span class="badge alert-danger">NO KNOWN ROUTE TO COORDINATOR</span>
        }
    </p>
}*@

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Rename</h5>
        @if (device.IsAvailable != true)
        {
            <div class="alert-info">
                Only online devices can be renamed. You may try anyway, at your risk...
            </div>
        }
        <form asp-action="RenameDevice" method="post" asp-route-id="@device.FriendlyName">
            <div class="input-group mb-3">
                <input type="text" class="form-control" value="@device.FriendlyName" name="newName">
                <div class="input-group-append">
                    <button class="btn btn-outline-secondary" type="submit">Rename</button>
                </div>
            </div>
        </form>
        <small class="form-text text-secondary">
            Warning: After renaming devices, you should restart Zigbee2Mqtt to force it to
            push new discovery entries. Renamed devices will appear "staled" until this reboot.
            THIS OPERATION WON'T CHANGE IDS IN HOME-ASSISTANT! Only the display name will change.
        </small>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Binding</h5>
        Bind this device (<code>@device.ToString()</code>) to send payloads (instructions) to this
        device:
        <form method="post" asp-route-id="@device.FriendlyName">
            @{
                var items = Model.BridgeState.Devices
                    .Select(d => new SelectListItem(d.ToString(), d.FriendlyName))
                    .OrderBy(x => x.Text)
                    .Prepend(new SelectListItem("--select a target device--", "", true, disabled: true));
            }
            <select name="targetId" asp-items="items" class="form-control"></select>
            <button class="btn btn-secondary" type="submit" asp-action="BindDevice" asp-route-id="@device.FriendlyName">BIND</button>
            <button class="btn btn-secondary" type="submit" asp-action="UnbindDevice" asp-route-id="@device.FriendlyName">UNBIND</button>
        </form>
        <small class="form-text text-info">
            <a href="https://www.zigbee2mqtt.io/information/binding.html" target="_blank">See documentation here on binding</a>.
            Binding to specific endpoint not supported yet.
        </small>
        <small class="form-text text-secondary">
            TIP1: You should manipulate the device right before sending the command to ensure the device will be awake and able to receive the binding instruction.
        </small>
        <small class="form-text text-secondary">
            TIP2: you may need to activate the <code>report</code> feature if you want the coordinator to receive new values.
            See how to activate the <code>report</code> feature <a href="https://www.zigbee2mqtt.io/information/report.html" target="_blank">here</a>.
        </small>
        <small class="form-text text-danger text-capitalize">You should check Zigbee2Mqtt logs to see if the binding/unbinding is successful.</small>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Delete</h5>
        <form asp-action="RemoveDevice" method="post" asp-route-id="@device.FriendlyName">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" name="forceRemove" value="true" />
                <label class="form-check-label">Use <strong>Force Remove</strong> mode.</label>
                <small class="form-text text-secondary">
                    <strong>Zigbee2Mqtt v1.7.0+</strong>
                    <br/>
                    Note that a force remove will only remove the device from the database.
                    Until this device is factory reset, it will still hold the network encryption
                    key and thus is still able to communicate over the network!
                    <br/>
                    TIP: Like for the Binding operation, it's better if you manipulate the device
                    during the removal - unless if you're using the <em>force remove</em> mode.
                    If you get an error during the non-forced mode, it means Zigbee2Mqtt wasn't
                    able to reach the device.
                </small>
            </div>
            <button class="btn bg-danger" type="submit">REMOVE THIS DEVICE</button>
        </form>
        <small class="form-text text-info">
            This will remove the device from Zigbee2Mqtt. You may repair it if you need it again.
            Removing a connected device will probably cause the re-creation of the device itself.
            <br />
            TIP: removing a device could help solving connection issues by forcing Zigbee2Mqtt to
            rediscover the device.
        </small>
    </div>
</div>
