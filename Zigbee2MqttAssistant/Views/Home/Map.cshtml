@using System.Collections.Immutable
@using Zigbee2MqttAssistant.Models.Devices
@using Zigbee2MqttAssistant.Services

@inject IBridgeStateService stateService
@{
    ViewData["Title"] = "Map";

    var state = stateService.CurrentState;

    var devices = state
        .Devices
        .Where(d => !string.IsNullOrWhiteSpace(d.ZigbeeId))
        .ToImmutableList();

    var links = devices
        .SelectMany(d => d.Parents.Select(p => (from:d.ZigbeeId, to:p.zigbeeId, quality:p.linkQuality, relationship: p.relationship)))
        .ToImmutableList();

    string getShape(ZigbeeDevice device)
    {
        switch (device.Type)
        {
            case "Coordinator":
                return "hexagon";
            case "EndDevice":
                return "ellipse";
            default:
                return "box";
        }
    }

    string getMass(ZigbeeDevice device)
    {
        switch (device.Type)
        {
            case "Coordinator":
                return "8";
            case "EndDevice":
                return "1";
            default:
                return "5";
        }
    }

}

<h1>Map</h1>

<div class="card">
    @if (!state.Devices.Any(d => d.Parents.Any()))
    {
        <div>MAP NOT AVAILABLE YET - REFRESH TO SEE SOMETHING.</div>
        <form method="get">
            <button class="btn btn-outline-secondary" asp-area="" asp-action="Map">REFRESH</button>
        </form>
    }
    <div id="map"></div>
</div>

<script src="~/lib/vis-network/dist/vis-network.js" asp-append-version="true"></script>

<script type="text/javascript">
    var network;

    (function (ctl) {
        const options = {
            autoResize: true
        };

        const nodes = new vis.DataSet([
            @foreach(var device in devices)
            {
                WriteLiteral("{id: '" + device.ZigbeeId + "', label: '" + device.FriendlyName.Replace("'", "\\'") + "', shape:'" + getShape(device) + "', mass:" + getMass(device) + "},\n");
            }
        ]);
        const edges = new vis.DataSet([
            @{
            @foreach(var link in links)
            {
                var length = 1000 / (Math.Pow(link.quality + 1, 1.25)) + 25;
                var color = "{}";
                if (link.relationship >= 3)
                {
                    color = "'red'";
                }
                else if(link.from == state.CoordinatorZigbeeId)
                {
                    color = "'green'";
                }
                var dashes = link.relationship >= 3 ? "'true'" : "false";


                WriteLiteral("{from: '" + link.from + "', to: '" + link.to + "', label: '" + link.quality + "', length: " + length +", color:" + color + ", dashes: " + dashes + ", arrows: { to: { enabled: true } }, font: { size: 10 } },\n");
            }
            }
        ]);

        const data = {
            nodes: nodes,
            edges: edges
        };

        
        const onResize = function () {
            const rect = ctl.getBoundingClientRect();
            const pageHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
            const ctlHeight = Math.max((pageHeight - rect.top) - 20, 200);

            ctl.style.height = ctlHeight + "px";

            if (network) {
                network.fit();
            }
        };

        onResize();

        window.addEventListener("resize", onResize);

        network = new vis.Network(ctl, data, options);

    })(document.getElementById("map"));
</script>
