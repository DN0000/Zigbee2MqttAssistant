parameters:
  target: ''
  vmImage: ''
  imageTag: ''
  osTag: ''

# Inspiration for this file: https://www.axians-infoma.de/techblog/creating-a-multi-arch-docker-image-with-azure-devops/

jobs:
  - job: ${{ format('build_image_{0}', parameters.osTag) }}
    dependsOn: compile_on_windows
    pool:
      vmImage: ${{ parameters.vmImage }}
    variables:
      osTag: ${{ parameters.target }}
      imageTag: ${{ parameters.imageTag }}


    steps:

    - task: DownloadBuildArtifacts@0
      displayName: 'Restore artifacts compiled on Windows'
      inputs:
        downloadType: 'all'
        downloadPath: '$(Build.ArtifactStagingDirectory)'

    - task: DockerInstaller@0
      displayName: 'Install docker on CI agent'
      inputs:
        dockerVersion: '17.09.0-ce'

    - task: CopyFiles@2
      displayName: 'Copy artifacts to right folder for Docker build'
      inputs:
        SourceFolder: '$(Build.ArtifactStagingDirectory)/Application/app'
        Contents: '**'
        TargetFolder: 'Zigbee2MqttAssistant/apppublish'

    - task: CmdLine@2
      displayName: 'Build docker images'
      inputs:
        script: |
          docker build . -t zigbee2mqttassistant:$(Build.BuildId)-$(osTag) --build-arg DOTNETTAG=$(imageTag) --build-arg OSTAG=$(osTag)

    - task: CmdLine@2
      displayName: 'save docker images to artifacts'
      inputs:
        script: |
          docker save zigbee2mqttassistant:$(Build.BuildId)-$(osTag) -o "$(Build.ArtifactStagingDirectory)/zigbee2mqttassistant-$(Build.BuildId)-$(osTag).tar"

    - task: PowerShell@2
      displayName: 'http test to container'
      inputs:
        targetType: inline
        # connect to container to ensure it works
        script: |
          docker run --rm --privileged multiarch/qemu-user-static:register --reset
          docker run -d -p:8088:80 --name z2ma zigbee2mqttassistant:$(Build.BuildId)-$(osTag)
          Start-Sleep -Seconds 5
          docker logs z2ma
          wget http://localhost:8088/

    - task: PublishBuildArtifacts@1
      displayName: 'Publish docker images as build artifacts'
      condition: always()
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'Application'
        publishLocation: 'Container'
